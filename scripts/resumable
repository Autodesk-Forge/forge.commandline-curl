#!/bin/bash

[[ -f ./_tools ]] && source ./_tools
[[ -f ./scripts/_tools ]] && source ./scripts/_tools
source $ROOT/scripts/_config

#    resumable <File> <Pieces>
#          - upload a file in multiple pieces (i.e. resumables)

if [ ! -f "$1" ]; then
	echo "File not found: $1"
	exit
fi

fullpath=$1
filename=$(basename "$fullpath")
filenameUri=`echo "$filename" | sed 's/ /+/g'`

if [ "$2" == "" ]; then
    echo "Please specify how many pieces you want (minimum 2)"
    exit
fi

pieces=$2
filesz=$(wc -c "$fullpath" | awk '{print $1}')
piecesz=$((filesz / pieces))
modsz=$((filesz % pieces))

sessionId=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z0-9' | fold -w 16 | head -n 1)
sessionId="cyr${sessionId}"
echo "Current session: ${sessionId}"

total=0
for i in $(seq 1 $pieces); do
    tpos=$(((i - 1) * piecesz + 1))
    pos=$(($tpos - 1))
    end=$((i * piecesz - 1))
    if [ $i == $pieces ]; then
        end=$((filesz - 1))
        piecesz=$((end - pos + 1))
    fi

    # When we use resumable upload, this is usually because the file is very big
    # Here we make a new token to have better chance it is not expiring while
    # uploading on slow connections
	source $ROOT/scripts/2legged
	access_token=`cat $ROOT/data/access_token`

    # Now to one upload
    response=$(tail -c +${tpos} ${fullpath} | head -c ${piecesz} \
        | curl --header "Authorization: ${access_token}" \
            --header "Content-Type:application/octet-stream" --header "Session-Id: ${sessionId}" \
            --header "Content-Range: bytes ${pos}-${end}/${filesz}" --data-binary @- \
            -X PUT "${APIHost}oss/v2/buckets/${bucket}/objects/${filenameUri}/resumable" \
            --write-out "Response code: %{http_code}")
    #echo $response

    status=$(echo $response | sed 's/.*Response code: \([0-9]*\)/\1/')
    if [ "${status}" == "202" ]; then
        echo "${status} - bytes ${pos}-${end}/${filesz}"
        printf "\n"
    elif [ "${status}" == "200" ]; then
        echo "${status} - bytes ${pos}-${end}/${filesz}"
        #echo $response | jq .
        id=$(echo $response | jq --raw-output .objectId 2>/dev/null)
        location=$(echo $response | jq --raw-output .location 2>/dev/null)
        echo "ID: $id"
        echo "Location: $location"
        filenameHdd=`echo "$filenameUri" | sed 's/+/ /g'`
        echo $response > "$ROOT/data/${bucket}.${filenameHdd}.json"
    else
		reason=$(echo $response | jq --raw-output .reason)
		if [ "$reason" != "null" ] ; then
			echo "${reason}"
		fi
        exit
    fi

    total=$((total + piecesz))
done
